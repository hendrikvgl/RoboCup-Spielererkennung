#-*- coding:utf-8 -*-__author__ = 'Tim Dobert'"""Entwickelt im Robo-Cup Praktikum SoSe 2014Dieses Skript macht eine Animation perfekt symmetrisch und beseitigt unwichtige Winkel.Dazu wird der Durschnitt zweier Motorenwinkel gebildet und bei beiden (mit korrektem Vorzeichen)hingeschrieben. Winkel, die kleiner als 3° sind, werden auf 0 gesetzt.Beim Kopf passiert nur Letzteres.Aufruf mit -p gibt die neuen Werte auf der Konsole aus."""import reimport sys#Für die optionale Ausgabe auf der Konsoledef print_out(string) :    if len(sys.argv) > 1 and sys.argv[1] == "-p" :        print string#Dateien öffnenfile = raw_input("Eingabedatei: ") + ".json"f = open(str(file), "r")new_file = raw_input("Ausgabedatei: ") + ".json"g = open(str(new_file), "w")count_braces = 0for line in f:    find_braces = re.search( r'\{\n', line)    if find_braces:        #Klammern zählen, um zu wissen, in welchem Keyframe man ist        count_braces = count_braces + 1        if count_braces % 2 == 0 and count_braces != 0:            print_out("")            print_out("Keyframe " + str(count_braces/2) + ":")                find_angle = re.search( r'\"L.*:', line)    if find_angle:     #Motorzeilen, die mit L anfangen         newL1 = ""        newL2 = ""        jointName = find_angle.group().replace("\"L", "").replace("\"", "")        val1 = float(re.search( r'-?\d+(.\d+)?', line, re.I).group())  #1. Winkel merken                #Datei nach dem passenden rechten Winkel durchsuchen:        f2 = open(str(file), "r")        count_braces2 = 0        for line2 in f2:            find_braces2 = re.search( r'\{\n', line2)            if find_braces2:                count_braces2 = count_braces2 + 1            if count_braces2 >= count_braces :  #Im richtigen Keyframe suchen                                find_angle = re.search( r'\"R.*:', line2)                if find_angle and find_angle.group().replace("\"R", "").replace("\"", "") == jointName:                    #Wenn er gefunden wurde                    val2 = - float(re.search( r'-?\d+(.\d+)?', line2, re.I).group())   #2. Winkel merken, Vorzeichen beachten                    #Durchschnitt, Runden, etc.                    avrg = round((val1 + val2) / 2)                    if abs(avrg) < 3 :                        avrg = 0.0                    print_out("Wert für " + jointName + " " + str(avrg))        #Neue Zeilen konstruieren und schreiben                    newL1 = re.sub(r'-?\d+(.\d+)?', str(avrg), line)                    newL2 = re.sub(r'-?\d+(.\d+)?', str(-avrg), line2)                    break;        g.write(newL1)        g.write(newL2)            else :        find_angle = re.search(r'\"[A-Z].*:', line)        if find_angle: #Motorzeilen für z.b. den Kopf haben keinen Partner, werden aber auch normalisiert            val = round(float(re.search( r'-?\d+(.\d+)?', line, re.I).group()))            if abs(val) < 3 :                val = 0.0            line = re.sub(r'-?\d+(.\d+)?', str(val), line)            name = find_angle.group().replace(":\"", "").replace("\"", "")            print_out("Wert für " + name + " " + str(val))                    find_angle = re.search( r'R.*:', line)        if not find_angle:   #Zeilen für Rechte Motorwinkel werden in dem anderen Zweig bearbeitet            g.write(line)print "Fertig!"print ""