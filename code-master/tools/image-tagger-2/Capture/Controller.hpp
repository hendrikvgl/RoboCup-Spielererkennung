// Controller.hpp
// Version: 0.0.3
// Date: 05.02.2015/05.02.2015/13.02.2015
// Author: Oliver Sengpiel

#ifndef CONTROLLER_HPP
#define CONTROLLER_HPP

#include <fcntl.h>
#include <unistd.h>
#include <sys/ioctl.h>
#include <linux/videodev2.h>

#include<exception>
#include<string>

//! Indicates a failed operation or incapability of the driver.
/**
 * This Exceptions are not critical and need no special treatment. They are
 * thrown when the driver can't change the requested field (does not implement
 * the control over the field) or the operation is invalid.
 **/
class ControllerException : public std::exception
{
public:
    ControllerException(std::string message)
	:message_(message) {}
    ~ControllerException() = default;
    virtual const char * what() const noexcept { return message_.c_str(); }
private:
    std::string message_;
};

//! This is the controller, which changes the camerasettings during streaming.
/**
 * Controllers are constructed by Capture objects. They need the same file
 * descriptor as the Capture to operate. Thus only Controllers generated by a
 * Capture can hold valid file descriptors.
 *
 * When a operation is not available, a ControllerException is thrown by the
 * controller. These Exceptions are not critical and they indicate either an
 * invalid operation or an incapability of the camera driver to set the field.
 **/
class Controller
{
public:
    explicit Controller(int fd);
    ~Controller();

    int getBrightness() const;
    int getContrast() const;
    int getSaturation() const;
    int getHue() const;
    int getSharpness() const;
    int getGain() const;
    bool isAutoGainOn() const;
    bool isAutoWhiteBalanceOn() const;
    int	getWhiteBalanceTemperature() const;
    int getFocusAbsolute() const;
    int getFocusRelative() const;
    bool isFocusAutoOn() const;
    bool isExposureAutoOn() const;
    int getExposureAbsolute() const;
    bool isExposureAutoPriorityOn() const;

    void setBrigthness(int value);
    void setContrast(int value);
    void setSaturation(int value);
    void setHue(int value);
    void setSharpness(int value);
    void setGain(int value);
    void toggleAutoGainOn(bool value);
    void toggleAutoWhiteBalanceOn(bool value);
    void setWhiteBalanceTemperature(int value);
    void setFocusAbsolute(int value);
    void setFocusRelative(int value);
    void toggleFocusAuto(bool value);
    void toggleExposureAuto(bool value);
    void setExposureAbsolute(int value);
    void toggleExposureAutoPriority(bool value);
private:
    int fd_;

    int intRequest(int controller, const std::string& name) const;
    bool boolRequest(int controller, const std::string& name) const;
    void intChange(int controller, int value, const std::string& name);
    void boolChange(int controller, bool value, const std::string& name);
};

#endif
